from datetime import date
from typing import List, Set


# ===============================
# Guest Class
# ===============================
class Guest:
    def __init__(self, name: str, email: str, phone: str):
        self._name = name
        self._email = email
        self._phone = phone
        self._loyalty_points = 0
        self._bookings: List[Booking] = []

    def add_booking(self, booking: 'Booking'):
        self._bookings.append(booking)
        self._loyalty_points += 10

    def get_booking_history(self) -> List['Booking']:
        return self._bookings

    def __str__(self):
        return f"Guest: {self._name}, Email: {self._email}, Loyalty Points: {self._loyalty_points}"


# ===============================
# Room Class
# ===============================
class Room:
    def __init__(self, room_number: int, room_type: str, price_per_night: float, amenities: List[str] = None):
        self._room_number = room_number
        self._room_type = room_type
        self._price_per_night = price_per_night
        self._amenities = amenities if amenities else []
        self._is_available = True
        self._booked_dates: Set[date] = set()

    def book_dates(self, checkin: date, checkout: date) -> bool:
        new_dates = {date.fromordinal(i) for i in range(checkin.toordinal(), checkout.toordinal())}
        if new_dates & self._booked_dates:
            return False
        self._booked_dates.update(new_dates)
        return True

    def cancel_booking(self, checkin: date, checkout: date) -> bool:
        cancel_dates = {date.fromordinal(i) for i in range(checkin.toordinal(), checkout.toordinal())}
        self._booked_dates -= cancel_dates
        return True

    def is_available_for_dates(self, checkin: date, checkout: date) -> bool:
        test_dates = {date.fromordinal(i) for i in range(checkin.toordinal(), checkout.toordinal())}
        return not bool(test_dates & self._booked_dates)

    def __str__(self):
        return f"Room {self._room_number} ({self._room_type}) - ${self._price_per_night}/night"


# ===============================
# Booking Class
# ===============================
class Booking:
    def __init__(self, booking_id: str, room: Room, checkin: date, checkout: date):
        self._booking_id = booking_id
        self._room = room
        self._checkin = checkin
        self._checkout = checkout
        self._status = "confirmed"

    def cancel(self):
        self._status = "cancelled"

    def __str__(self):
        return f"Booking {self._booking_id}: {self._room} from {self._checkin} to {self._checkout} [{self._status}]"


# ===============================
# Invoice Class
# ===============================
class Invoice:
    def __init__(self, invoice_id: str, booking: Booking, additional_charges: float = 0.0, discount: float = 0.0):
        self._invoice_id = invoice_id
        self._booking = booking
        self._additional_charges = additional_charges
        self._discount = discount

    def calculate_total(self) -> float:
        nights = (self._booking._checkout - self._booking._checkin).days
        base = nights * self._booking._room._price_per_night
        return max(0, base + self._additional_charges - self._discount)

    def __str__(self):
        return f"Invoice {self._invoice_id}: Total = ${self.calculate_total():.2f}"


# ===============================
# Payment Class
# ===============================
class Payment:
    def __init__(self, payment_id: str, invoice: Invoice, method: str):
        self._payment_id = payment_id
        self._invoice = invoice
        self._method = method
        self._status = "pending"

    def process_payment(self):
        self._status = "paid"

    def __str__(self):
        return f"Payment {self._payment_id} | Method: {self._method} | Status: {self._status}"


# ===============================
# ServiceRequest Class
# ===============================
class ServiceRequest:
    def __init__(self, request_id: str, guest_email: str, service_type: str, request_date: date):
        self._request_id = request_id
        self._guest_email = guest_email
        self._service_type = service_type
        self._request_date = request_date
        self._status = "pending"

    def mark_completed(self):
        self._status = "completed"

    def __str__(self):
        return f"Request {self._request_id} | {self._service_type} for {self._guest_email} on {self._request_date} [{self._status}]"
